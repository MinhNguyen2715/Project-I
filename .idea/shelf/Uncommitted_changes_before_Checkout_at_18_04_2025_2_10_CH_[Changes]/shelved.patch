Index: src/main/java/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws IOException {\r\n//        PowerShellExecutor powerShellExecutor = new PowerShellExecutor();\r\n//        AtomicTestManager atomicTestManager = new AtomicTestManager(powerShellExecutor);\r\n//        String res = atomicTestManager.showAll();\r\n//        System.out.println(res);\r\n        atomicTesting();\r\n    }\r\n\r\n    public static void atomicTesting() throws IOException {\r\n        Scanner scanner = new Scanner(System.in);\r\n        PowerShellExecutor powerShellExecutor = new PowerShellExecutor();\r\n        AtomicTestManager atomicTestManager = new AtomicTestManager(powerShellExecutor);\r\n        while (true){\r\n            System.out.println(\"*** Atomic Test Runner System ***\");\r\n            System.out.println(\"------------------------------\");\r\n            System.out.println(\"Choose Invoke-Atomic command:\");\r\n            System.out.println(\"1. View detail\");\r\n            System.out.println(\"2. Check prerequisites\");\r\n            System.out.println(\"3. Get prerequisites\");\r\n            System.out.println(\"4. Run Atomic Test\");\r\n            System.out.println(\"5. Cleanup Atomic Test\");\r\n            System.out.println(\"6. List all Atomic test\");\r\n            System.out.println(\"7. Auto Run A Manual Technique\");\r\n            System.out.println(\"0. Exit\");\r\n            System.out.println(\"------------------------------\");\r\n            String respond = scanner.nextLine();\r\n            String ans;\r\n\r\n            switch (respond){\r\n                case \"0\":\r\n                    System.out.println(\"Exiting...\");\r\n                    return;\r\n                case \"1\":\r\n                    System.out.println(\"Enter technique ID:\");\r\n                    String id = scanner.nextLine();\r\n                    System.out.println(\"Show full or brief? (F/B)\");\r\n                    ans = scanner.nextLine().toLowerCase();\r\n                    if (\"b\".equals(ans)){\r\n                        System.out.println(atomicTestManager.showDetailsBrief(id));\r\n                    } else {\r\n                        System.out.println(atomicTestManager.showDetails(id));}\r\n                    break;\r\n                case \"2\":\r\n                    System.out.println(\"Enter technique ID:\");\r\n                    id = scanner.nextLine();\r\n                    System.out.println(\"Check all testcase or 1 testcase? (A/test number)\");\r\n                    ans = scanner.nextLine().toLowerCase();\r\n                    if (\"a\".equals(ans)){\r\n                        System.out.println(atomicTestManager.checkPrereqs(id));\r\n                    } else {\r\n                        try {\r\n                            int testNumber = Integer.parseInt(ans);\r\n                            System.out.println(atomicTestManager.checkPrereqs(id, testNumber));\r\n                        } catch (NumberFormatException e) {\r\n                            System.out.println(\"Invalid test number.\");\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"3\":\r\n                    System.out.println(\"Enter technique ID:\");\r\n                    id = scanner.nextLine();\r\n                    System.out.println(\"Get prerequisites f·ªè all testcase or 1 testcase? (A/test number)\");\r\n                    ans = scanner.nextLine().toLowerCase();\r\n                    if (\"a\".equals(ans)){\r\n                        System.out.println(atomicTestManager.getPrereqs(id));\r\n                    } else {\r\n                        try {\r\n                            int testNumber = Integer.parseInt(ans);\r\n                            System.out.println(atomicTestManager.getPrereqs(id, testNumber));\r\n                        } catch (NumberFormatException e) {\r\n                            System.out.println(\"Invalid test number.\");\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"4\":\r\n                    System.out.println(\"Enter technique ID:\");\r\n                    id = scanner.nextLine();\r\n                    System.out.println(\"Run all or specify tests? (A/test numbers)\");\r\n                    ans = scanner.nextLine().toLowerCase();\r\n                    if (\"a\".equals(ans)){\r\n                        System.out.println(atomicTestManager.runAtomicTest(id));\r\n                    } else {\r\n                        try {\r\n                            System.out.println(atomicTestManager.runAtomicTest(id, ans));\r\n                        } catch (NumberFormatException e) {\r\n                            System.out.println(\"Invalid test number.\");\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"5\":\r\n                    System.out.println(\"Enter technique ID:\");\r\n                    id = scanner.nextLine();\r\n                    System.out.println(\"Cleanup all or specify tests? (A/test numbers)\");\r\n                    ans = scanner.nextLine().toLowerCase();\r\n                    if (\"a\".equals(ans)){\r\n                        System.out.println(atomicTestManager.cleanupAtomicTest(id));\r\n                    } else {\r\n                        try {\r\n                            System.out.println(atomicTestManager.cleanupAtomicTest(id, ans));\r\n                        } catch (NumberFormatException e) {\r\n                            System.out.println(\"Invalid test number.\");\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"6\":\r\n                    System.out.println(\"Any OS? (Y/N)\");\r\n                    ans = scanner.nextLine().toLowerCase();\r\n                    if (\"y\".equals(ans)){\r\n                        System.out.println(atomicTestManager.showAllOs());\r\n                    } else {\r\n                        System.out.println(atomicTestManager.showAll());}\r\n                    break;\r\n\r\n                case \"7\":\r\n                    System.out.println(\"Enter technique ID:\");\r\n                    id = scanner.nextLine();\r\n                    String os;\r\n                    do{\r\n                        System.out.println(\"OS? (Window, Linux, MacOS)\");\r\n                        os = scanner.nextLine();\r\n                    } while (! os.equals(\"Window\") && ! os.equals(\"Linux\") && ! os.equals(\"MacOS\"));\r\n                    try {\r\n                        System.out.println(atomicTestManager.runAllTestsForTechnique(id,os));\r\n                    } catch (NumberFormatException e) {\r\n                        System.out.println(\"Invalid test number.\");\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    System.out.println(\"Enter correct command!\");\r\n                    break;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Main.java b/src/main/java/Main.java
--- a/src/main/java/Main.java	(revision dfff3d2fe08cd08bd6e55ef62b3bfb62dc8fea39)
+++ b/src/main/java/Main.java	(date 1744959426130)
@@ -122,7 +122,7 @@
                     do{
                         System.out.println("OS? (Window, Linux, MacOS)");
                         os = scanner.nextLine();
-                    } while (! os.equals("Window") && ! os.equals("Linux") && ! os.equals("MacOS"));
+                    } while (! os.equals("window") && ! os.equals("linux") && ! os.equals("macos"));
                     try {
                         System.out.println(atomicTestManager.runAllTestsForTechnique(id,os));
                     } catch (NumberFormatException e) {
Index: src/main/java/AtomicTestManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.IOException;\r\n\r\npublic class AtomicTestManager {\r\n    private final PowerShellExecutor powerShellExecutor;\r\n    private static final String IMPORT_MODULE =\r\n            \"Import-Module \\\".\\\\invoke-atomicredteam\\\\Invoke-AtomicRedTeam.psd1\\\";\";\r\n\r\n    private static final String LOG_PATH = \"\";\r\n\r\n    public AtomicTestManager(PowerShellExecutor powerShellExecutor) {\r\n        this.powerShellExecutor = powerShellExecutor;\r\n    }\r\n\r\n    public String runAtomicTest(String techniqueId) throws IOException {\r\n        String command = String.format(\"%s Invoke-AtomicTest %s\", IMPORT_MODULE, techniqueId);\r\n        return powerShellExecutor.execute(command);\r\n    }\r\n\r\n    public String runAtomicTest(String techniqueId, int testNumber) throws IOException {\r\n        String command = String.format(\"%s Invoke-AtomicTest %s -TestNumbers %s\", IMPORT_MODULE, techniqueId, testNumber);\r\n        return powerShellExecutor.execute(command);\r\n    }\r\n\r\n    public String runAtomicTest(String techniqueId, int[] testNumbers) throws IOException {\r\n        StringBuilder testNumbersStr = new StringBuilder();\r\n        for (int num : testNumbers) {\r\n            testNumbersStr.append(num).append(\",\");\r\n        }\r\n\r\n        // Remove trailing comma\r\n        if (testNumbersStr.length() > 0) {\r\n            testNumbersStr.setLength(testNumbersStr.length() - 1);\r\n        }\r\n\r\n        String command = String.format(\"%s Invoke-AtomicTest %s -TestNumbers %s\",\r\n                IMPORT_MODULE, techniqueId, testNumbersStr);\r\n        return powerShellExecutor.execute(command);\r\n    }\r\n\r\n    public String runAllTestsForTechnique(String techniqueId, String os) throws IOException {\r\n        String psScript = String.join(\"\\n\",\r\n                \"Import-Module \\\"C:\\\\AtomicRedTeam\\\\invoke-atomicredteam\\\\Invoke-AtomicRedTeam.psd1\\\" -Force;\",\r\n                // Get the single technique file\r\n                \"$technique = Get-AtomicTechnique -Path \\\"C:\\\\AtomicRedTeam\\\\atomics\\\\\" + techniqueId + \"\\\\\" + techniqueId + \".yaml\\\";\",\r\n                // Loop through atomic tests\r\n                \"foreach ($atomic in $technique.atomic_tests) {\",\r\n                \"  if ($atomic.supported_platforms -contains '\" + os + \"' -and ($atomic.executor.name -ne 'manual')) {\",\r\n                \"    try {\",\r\n                \"      Write-Output \\\"----------------------------------------------\\\"\",\r\n                \"      Write-Output \\\"Checking prereqs for test: $($atomic.name) [$($atomic.auto_generated_guid)]\\\";\",\r\n                \"      Invoke-AtomicTest \" + techniqueId + \" -TestGuids $atomic.auto_generated_guid -GetPrereqs | Out-Null;\",\r\n                \"      Write-Output \\\"Running: $($atomic.name) [$($atomic.auto_generated_guid)]\\\";\",\r\n                \"      Invoke-AtomicTest \" + techniqueId + \" -TestGuids $atomic.auto_generated_guid;\",\r\n                \"      Start-Sleep -Seconds 2;\",\r\n                \"      Write-Output \\\"Cleaning up test: $($atomic.name) [$($atomic.auto_generated_guid)]\\\";\",\r\n                \"      Invoke-AtomicTest \" + techniqueId + \" -TestGuids $atomic.auto_generated_guid -Cleanup;\",\r\n                \"      Write-Output \\\"Done with test: $($atomic.name)\\\";\",\r\n                \"    } catch {\",\r\n                \"      Write-Warning \\\"Failed test: $($atomic.name)\\\";\",\r\n                \"    }\",\r\n                \"  } else {\",\r\n                \"    Write-Output \\\"Skipping test: $($atomic.name) [Unsupported OS or manual executor]\\\"\",\r\n                \"  }\",\r\n                \"}\"\r\n        );\r\n\r\n        return powerShellExecutor.execute(psScript);\r\n    }\r\n\r\n\r\n    public String runAtomicTest(String techniqueId, String testNumbersStr) throws IOException {\r\n        // Split the string and parse to int array\r\n        String[] parts = testNumbersStr.split(\",\");\r\n        int[] testNumbers = new int[parts.length];\r\n\r\n        for (int i = 0; i < parts.length; i++) {\r\n            testNumbers[i] = Integer.parseInt(parts[i].trim());\r\n        }\r\n\r\n        // Call the int[] version\r\n        return runAtomicTest(techniqueId, testNumbers);\r\n    }\r\n\r\n    public String checkPrereqs(String techniqueId, String testName) throws IOException {\r\n        String command = String.format(\"%s Invoke-AtomicTest %s -TestName \\\"%s\\\" -CheckPrereqs\", IMPORT_MODULE, techniqueId, testName);\r\n        return powerShellExecutor.execute(command);\r\n    }\r\n\r\n    public String checkPrereqs(String techniqueId, int testNumber) throws IOException {\r\n        String command = String.format(\"%s Invoke-AtomicTest %s -TestNumbers \\\"%d\\\" -CheckPrereqs\", IMPORT_MODULE, techniqueId, testNumber);\r\n        return powerShellExecutor.execute(command);\r\n    }\r\n\r\n    public String checkPrereqs(String techniqueId) throws IOException {\r\n        String command = String.format(\"%s Invoke-AtomicTest %s -CheckPrereqs\", IMPORT_MODULE, techniqueId);\r\n        return powerShellExecutor.execute(command);\r\n    }\r\n\r\n\r\n    public String getPrereqs(String techniqueId, String testName) throws IOException {\r\n        String command = String.format(\"%s Invoke-AtomicTest %s -TestName \\\"%s\\\" -GetPrereqs | Invoke-Expression\", IMPORT_MODULE, techniqueId, testName);\r\n        return powerShellExecutor.execute(command);\r\n    }\r\n\r\n    public String getPrereqs(String techniqueId, int testNumber) throws IOException {\r\n        String command = String.format(\"%s Invoke-AtomicTest %s -TestNumbers \\\"%d\\\" -GetPrereqs | Invoke-Expression\", IMPORT_MODULE, techniqueId, testNumber);\r\n        return powerShellExecutor.execute(command);\r\n    }\r\n\r\n    public String getPrereqs(String techniqueId) throws IOException {\r\n        String command = String.format(\"%s Invoke-AtomicTest %s -GetPrereqs | Invoke-Expression\", IMPORT_MODULE, techniqueId);\r\n        return powerShellExecutor.execute(command);\r\n    }\r\n\r\n    public String runPrereq(String techniqueId) throws IOException {\r\n        String command = String.format(\"%s Get-PrereqCommand %s | Invoke-Expression\", IMPORT_MODULE, techniqueId);\r\n        return powerShellExecutor.execute(command);\r\n    }\r\n\r\n    public String showDetailsBrief(String techniqueId) throws IOException {\r\n        String command = String.format(\"%s Invoke-AtomicTest %s -ShowDetailsBrief\", IMPORT_MODULE, techniqueId);\r\n        return powerShellExecutor.execute(command);\r\n    }\r\n\r\n    public String showDetails(String techniqueId) throws IOException {\r\n        String command = String.format(\"%s Invoke-AtomicTest %s -ShowDetails\", IMPORT_MODULE, techniqueId);\r\n        return powerShellExecutor.execute(command);\r\n    }\r\n\r\n    public String showAll() throws IOException {\r\n        String command = String.format(\"%s Invoke-AtomicTest All -ShowDetailsBrief\", IMPORT_MODULE);\r\n        return powerShellExecutor.execute(command);\r\n    }\r\n\r\n    public String showAllOs() throws IOException {\r\n        String command = String.format(\"%s Invoke-AtomicTest All -ShowDetailsBrief -anyOS\", IMPORT_MODULE);\r\n        return powerShellExecutor.execute(command);\r\n    }\r\n\r\n    public String cleanupAtomicTest(String techniqueId, String testNumber) throws IOException {\r\n        String command = String.format(\"%s Invoke-AtomicTest %s -TestNumbers %s -Cleanup\", IMPORT_MODULE, techniqueId, testNumber);\r\n        return powerShellExecutor.execute(command);\r\n    }\r\n\r\n    public String cleanupAtomicTest(String techniqueId) throws IOException {\r\n        String command = String.format(\"%s Invoke-AtomicTest %s -Cleanup\", IMPORT_MODULE, techniqueId);\r\n        return powerShellExecutor.execute(command);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/AtomicTestManager.java b/src/main/java/AtomicTestManager.java
--- a/src/main/java/AtomicTestManager.java	(revision dfff3d2fe08cd08bd6e55ef62b3bfb62dc8fea39)
+++ b/src/main/java/AtomicTestManager.java	(date 1744959539212)
@@ -44,7 +44,7 @@
                 "$technique = Get-AtomicTechnique -Path \"C:\\AtomicRedTeam\\atomics\\" + techniqueId + "\\" + techniqueId + ".yaml\";",
                 // Loop through atomic tests
                 "foreach ($atomic in $technique.atomic_tests) {",
-                "  if ($atomic.supported_platforms -contains '" + os + "' -and ($atomic.executor.name -ne 'manual')) {",
+                "  if ($atomic.supported_platforms -contains (\" " + os + "\")) {",
                 "    try {",
                 "      Write-Output \"----------------------------------------------\"",
                 "      Write-Output \"Checking prereqs for test: $($atomic.name) [$($atomic.auto_generated_guid)]\";",
