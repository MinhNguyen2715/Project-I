Index: src/main/java/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws IOException {\r\n        atomicTesting();\r\n    }\r\n\r\n    public static void atomicTesting() throws IOException {\r\n        Scanner scanner = new Scanner(System.in);\r\n        AtomicTestManager atomicTestManager = new AtomicTestManager();\r\n\r\n        PowerShellExecutor powerShellExecutor = new PowerShellExecutor(atomicTestManager);\r\n        atomicTestManager.setPowerShellExecutor(powerShellExecutor);\r\n\r\n        while (true) {\r\n            System.out.println(\"*** Atomic Test Runner System ***\");\r\n            System.out.println(\"------------------------------\");\r\n            System.out.println(\"Choose Invoke-Atomic command:\");\r\n            System.out.println(\"1. View detail\");\r\n            System.out.println(\"2. Check prerequisites\");\r\n            System.out.println(\"3. Get prerequisites\");\r\n            System.out.println(\"4. Run Atomic Test\");\r\n            System.out.println(\"5. Cleanup Atomic Test\");\r\n            System.out.println(\"6. List all Atomic test\");\r\n            System.out.println(\"7. Auto Run A Manual Technique\");\r\n            System.out.println(\"0. Exit\");\r\n            System.out.println(\"------------------------------\");\r\n            String respond = scanner.nextLine();\r\n            String ans;\r\n\r\n            switch (respond) {\r\n                case \"0\":\r\n                    System.out.println(\"Exiting...\");\r\n                    return;\r\n                case \"1\":\r\n                    System.out.println(\"Enter technique ID:\");\r\n                    String id = scanner.nextLine();\r\n                    System.out.println(\"Show full or brief? (F/B)\");\r\n                    ans = scanner.nextLine().toLowerCase();\r\n                    if (\"b\".equals(ans)) {\r\n                        System.out.println(atomicTestManager.showDetailsBrief(id));\r\n                    } else {\r\n                        System.out.println(atomicTestManager.showDetails(id));\r\n                    }\r\n                    break;\r\n                case \"2\":\r\n                    System.out.println(\"Enter technique ID:\");\r\n                    id = scanner.nextLine();\r\n                    System.out.println(\"Check all testcase or 1 testcase? (A/test number)\");\r\n                    ans = scanner.nextLine().toLowerCase();\r\n                    if (\"a\".equals(ans)) {\r\n                        System.out.println(atomicTestManager.checkPrereqs(id));\r\n                    } else {\r\n                        try {\r\n                            int testNumber = Integer.parseInt(ans);\r\n                            System.out.println(atomicTestManager.checkPrereqs(id, testNumber));\r\n                        } catch (NumberFormatException e) {\r\n                            System.out.println(\"Invalid test number.\");\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"3\":\r\n                    System.out.println(\"Enter technique ID:\");\r\n                    id = scanner.nextLine();\r\n                    System.out.println(\"Get prerequisites for all testcase or 1 testcase? (A/test number)\");\r\n                    ans = scanner.nextLine().toLowerCase();\r\n                    if (\"a\".equals(ans)) {\r\n                        System.out.println(atomicTestManager.getPrereqs(id));\r\n                    } else {\r\n                        try {\r\n                            int testNumber = Integer.parseInt(ans);\r\n                            System.out.println(atomicTestManager.getPrereqs(id, testNumber));\r\n                        } catch (NumberFormatException e) {\r\n                            System.out.println(\"Invalid test number.\");\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"4\":\r\n                    System.out.println(\"Enter technique ID:\");\r\n                    id = scanner.nextLine();\r\n                    System.out.println(\"Run all or specify tests? (A/test numbers)\");\r\n                    ans = scanner.nextLine().toLowerCase();\r\n                    if (\"a\".equals(ans)) {\r\n                        System.out.println(atomicTestManager.runAtomicTest(id));\r\n                    } else {\r\n                        try {\r\n                            System.out.println(atomicTestManager.runAtomicTest(id, ans));\r\n                        } catch (NumberFormatException e) {\r\n                            System.out.println(\"Invalid test number.\");\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"5\":\r\n                    System.out.println(\"Enter technique ID:\");\r\n                    id = scanner.nextLine();\r\n                    System.out.println(\"Cleanup all or specify tests? (A/test numbers)\");\r\n                    ans = scanner.nextLine().toLowerCase();\r\n                    if (\"a\".equals(ans)) {\r\n                        System.out.println(atomicTestManager.cleanupAtomicTest(id));\r\n                    } else {\r\n                        try {\r\n                            System.out.println(atomicTestManager.cleanupAtomicTest(id, ans));\r\n                        } catch (NumberFormatException e) {\r\n                            System.out.println(\"Invalid test number.\");\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"6\":\r\n                    System.out.println(\"Any OS? (Y/N)\");\r\n                    ans = scanner.nextLine().toLowerCase();\r\n                    if (\"y\".equals(ans)) {\r\n                        System.out.println(atomicTestManager.showAllOs());\r\n                    } else {\r\n                        System.out.println(atomicTestManager.showAll());\r\n                    }\r\n                    break;\r\n                case \"7\":\r\n                    System.out.println(\"Enter technique ID:\");\r\n                    id = scanner.nextLine();\r\n                    try {\r\n                        System.out.println(atomicTestManager.runAllTestsForTechnique(id));\r\n                    } catch (IOException e) {\r\n                        System.out.println(\"Error running tests: \" + e.getMessage());\r\n                    }\r\n                    break;\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Main.java b/src/main/java/Main.java
--- a/src/main/java/Main.java	(revision 1e484126c918afdf5e6da08802da15f28f5775fd)
+++ b/src/main/java/Main.java	(date 1745208433745)
@@ -1,9 +1,20 @@
 import java.io.IOException;
+import java.util.List;
 import java.util.Scanner;
 
 public class Main {
     public static void main(String[] args) throws IOException {
         atomicTesting();
+
+//        List<AtomicTestLog> logs = Logger.readLogs();
+//        for (AtomicTestLog log : logs) {
+//            System.out.println("Technique: " + log.getTechnique());
+//            System.out.println("Test GUID: " + log.getTestNumber());
+//            System.out.println("Command: " + log.getCommand());
+//            System.out.println("Result: " + log.getResult());
+//            System.out.println("-----");
+//        }
+
     }
 
     public static void atomicTesting() throws IOException {
Index: src/main/java/Logger.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import com.google.gson.Gson;\r\nimport com.google.gson.GsonBuilder;\r\n\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.net.InetAddress;\r\nimport java.time.Instant;\r\nimport java.time.ZonedDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.UUID;\r\n\r\npublic class Logger {\r\n    private static final String LOG_FILE_PATH = \"logs/atomic-log.json\";\r\n    private static final Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n\r\n    private static Boolean append = true;\r\n\r\n    public static void setAppend(Boolean append) {\r\n        Logger.append = append;\r\n    }\r\n\r\n    public static void log(String techniqueId, String testGuid, String command, String result) {\r\n        try {\r\n            AtomicTestLog logEntry = new AtomicTestLog();\r\n\r\n            ZonedDateTime now = ZonedDateTime.now();\r\n            logEntry.setExecutionTimeUtc(Instant.now().toString());\r\n            logEntry.setExecutionTimeLocal(now.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME));\r\n            logEntry.setTechnique(techniqueId);\r\n            logEntry.setTestNumber(testGuid);\r\n            logEntry.setHostname(InetAddress.getLocalHost().getHostName());\r\n            logEntry.setIpAddress(InetAddress.getLocalHost().getHostAddress());\r\n            logEntry.setUsername(System.getProperty(\"user.name\"));\r\n            logEntry.setGuid(UUID.randomUUID().toString());\r\n            logEntry.setTag(\"Scheduled\");\r\n            logEntry.setCustomTag(\"APT29\");\r\n            logEntry.setCommand(command);\r\n            logEntry.setResult(result);\r\n\r\n            String json = gson.toJson(logEntry);\r\n            try (BufferedWriter writer = new BufferedWriter(new FileWriter(LOG_FILE_PATH, append))) {\r\n                writer.write(json);\r\n                writer.newLine();\r\n            }\r\n        } catch (IOException e) {\r\n            System.err.println(\"Logging error: \" + e.getMessage());\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Logger.java b/src/main/java/Logger.java
--- a/src/main/java/Logger.java	(revision 1e484126c918afdf5e6da08802da15f28f5775fd)
+++ b/src/main/java/Logger.java	(date 1745202950264)
@@ -1,13 +1,13 @@
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 
-import java.io.BufferedWriter;
-import java.io.FileWriter;
-import java.io.IOException;
+import java.io.*;
 import java.net.InetAddress;
 import java.time.Instant;
 import java.time.ZonedDateTime;
 import java.time.format.DateTimeFormatter;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.UUID;
 
 public class Logger {
@@ -47,4 +47,18 @@
             System.err.println("Logging error: " + e.getMessage());
         }
     }
+
+    public static List<AtomicTestLog> readLogs() {
+        List<AtomicTestLog> logs = new ArrayList<>();
+        try (BufferedReader reader = new BufferedReader(new FileReader(LOG_FILE_PATH))) {
+            String line;
+            while ((line = reader.readLine()) != null) {
+                AtomicTestLog logEntry = gson.fromJson(line, AtomicTestLog.class);
+                logs.add(logEntry);
+            }
+        } catch (IOException e) {
+            System.err.println("Failed to read logs: " + e.getMessage());
+        }
+        return logs;
+    }
 }
